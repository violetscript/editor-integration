# tmLanguage
---
$schema: https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: VioletScript
scopeName: source.violet
fileTypes: ['violet']

variables:
  lineTerminator: '[\n\r\x{2028}\x{2029}]'
  id: '{{idStart}}{{idPart}}*|\#{{idPart}}+'
  idStart: '[\p{L}\p{Nl}$_]'
  idPart: '[\p{L}\p{Nd}\p{Nl}\p{Mc}\p{Mn}\p{Pc}$_]'
  idBreak: '(?!{{idPart}})'

  reservedWord: >-
    (?x) (
        a(s|wait)
      | break
      | c(ase|atch|lass|onst|ontinue)
      | d(efault|elete|o)
      | e(lse|xtends)
      | f(alse|inally|or|unction)
      | i(
          f
        | mplements
        | mport
        | nterface
        | nternal
        | n
        | s
        )
      | n(ew|ull)
      | p(
          ackage
        | rivate
        | rotected
        | ublic
        )
      | return
      | s(
          uper
        | witch
        )
      | t(
          his|
        | hrow(s?)|
        | rue
        | ry
        | ypeof
        )
      | use
      | v(ar|oid)
      | w(
          here
        | hile
        | ith
        )
      | yield
    ) {{idBreak}}

  decimalLiteral: >-
    (?x)
      ( (\d+(_\d+)+(\.\d*(_\d+)*)?)
      | (\.\d+(_\d+)*)
      ) ([Ee][+-]?\d+(_\d+)*)?

patterns:
  - include: '#statements'
  - match: '\}'
    name: invalid.violet

repository:
  statements:
    patterns:
      - include: '#definitions'
      - include: '#expressions'
  definitions:
    patterns: []
  expressions:
    patterns:
      - match: '\b(embed)(?=\s*[\\"''])'
        captures: { 1 = { name = 'keyword.other.violet' } }
      - match: '\b(await|yield|super|default)\b'
        captures: { 1 = { name = 'keyword.operator.violet' } }
      - match: '\b(import)\.(meta)\b'
        captures:
          1 = { name = 'keyword.other.violet' }
          2 = { name = 'keyword.other.violet' }
      - begin: '(->)[\s\t]*\{'
        end: '\}'
        captures: { 1 = { name = 'keyword.operator.violet' } }
        patterns:
          - include: '#statements'
      - begin: '(?<=->[\s\t\n\r]*)(\{)'
        end: '\}'
        patterns:
          - include: '#statements'
      - match: '->'
        name: keyword.operator.violet
      - begin: '\b(function)\b({{id}})?\b'
        end: ''
  comments:
    patterns:
      - include: '#multilineComment'
      - include: 'xmlComment'
      - match: '//.*'
        name: comment.line.double-slash.violet
  multilineComment:
    begin: '/\*'
    end: '\*/'
    name: comment.block.violet
    patterns:
      - include: '#multilineComment'
  xmlComment:
    begin: '<!--'
    end: '-->'
    name: comment.block.violet